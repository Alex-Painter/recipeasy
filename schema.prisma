// https://github.com/pgvector/pgvector-node#prisma
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  extensions = [vector]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// https://www.npmjs.com/package/prisma-json-types-generator
generator json {
  provider = "prisma-json-types-generator"
}

model Recipe {
  id Int @id @default(autoincrement())
  name String

  /// [RecipeInstructions]
  instructions Json?
  cookingTimeMinutes Int?

  author       User? @relation(fields: [createdBy], references: [id])
  createdBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  deletedAt    DateTime?

  recipeIngredients RecipeIngredient[] @relation("RecipeKey")
}

model RecipeIngredient {
  recipeId Int
  ingredientId Int
  amount Int
  unit UNIT

  recipe Recipe @relation("RecipeKey", fields: [recipeId], references: [id])
  ingredient Ingredient @relation("RecipeKey", fields: [ingredientId], references: [id])
  @@unique([recipeId, ingredientId])
}

model Ingredient {
  id Int @id @default(autoincrement())
  name String @unique // add unique constraint

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  deletedAt    DateTime?

  ingredientRecipes RecipeIngredient[] @relation("RecipeKey")
}

model IngredientVector {
  id Int @id @default(autoincrement())
  embedding Unsupported("vector(1536)")?
  content String
}


// also update types/types && recipe/new/route.ts
enum UNIT {
  GRAMS
  INDIVIDUAL
  MILLILITRES
  TABLESPOON
  TEASPOON
  OUNCE
  CUP
}

//
// AUTH
//

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}