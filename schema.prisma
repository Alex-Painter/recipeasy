// https://github.com/pgvector/pgvector-node#prisma
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  extensions = [vector]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Recipe {
  id Int @id @default(autoincrement())
  name String

  recipeIngredients RecipeIngredient[] @relation("RecipeKey")
}

model RecipeIngredient {
  recipeId Int
  ingredientId Int
  amount Int
  unit UNIT

  recipe Recipe @relation("RecipeKey", fields: [recipeId], references: [id])
  @@unique([recipeId, ingredientId])
}

model Ingredient {
  id Int @id @default(autoincrement())
  name String // add unique constraint
}

model IngredientVector {
  id Int @id @default(autoincrement())
  embedding Unsupported("vector(1536)")?
  content String
}


// also update recipeList/recipes.ts && recipe/new/route.ts
enum UNIT {
  GRAMS
  INDIVIDUAL
  MILLILITRES
  TABLESPOON
  TEASPOON
  OUNCE
  CUP
}

//
// AUTH
//

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}