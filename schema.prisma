// https://github.com/pgvector/pgvector-node#prisma
datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl  = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// https://www.npmjs.com/package/prisma-json-types-generator
generator json {
  provider = "prisma-json-types-generator"
}

model Recipe {
  id   Int    @id @default(autoincrement())
  name String

  /// [RecipeInstructions]
  instructions       Json?
  cookingTimeMinutes Int?

  promptId  String
  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  prompt            GenerationRequest       @relation(fields: [promptId], references: [id])
  author            User?                   @relation(fields: [createdBy], references: [id])
  recipeIngredients RecipeIngredient[]      @relation("RecipeKey")
  image             ImageGenerationRequest?
}

model GenerationRequest {
  id          String                  @id @default(cuid()) // cuid2?
  requestType GENERATION_REQUEST_TYPE

  // references the top-level generative request id
  parentRequestId String?
  status          GENERATION_REQUEST_STATUS @default(GENERATION_REQUESTED)
  text            String
  createdBy       String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @default(now())

  author User     @relation(fields: [createdBy], references: [id])
  Recipe Recipe[]
}

model ImageGenerationRequest {
  id String @id @default(cuid()) // cuid2?

  // references the top-level generative request id
  parentRequestId String?
  status          IMAGE_GENERATION_REQUEST_STATUS @default(GENERATION_REQUESTED)
  recipeId        Int                             @unique

  imageUrl     String?
  blobPathname String?

  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  recipe Recipe @relation(fields: [recipeId], references: [id])
  author User   @relation(fields: [createdBy], references: [id])
}

model RecipeIngredient {
  recipeId     Int
  ingredientId Int
  amount       Decimal @db.Decimal(7, 2)
  unit         UNIT

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  recipe     Recipe     @relation("RecipeKey", fields: [recipeId], references: [id])
  ingredient Ingredient @relation("RecipeKey", fields: [ingredientId], references: [id])

  @@unique([recipeId, ingredientId])
}

model Ingredient {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  ingredientRecipes RecipeIngredient[] @relation("RecipeKey")
}

model IngredientVector {
  id        Int                          @id @default(autoincrement())
  embedding Unsupported("vector(1536)")?
  content   String
}

// also update types/types && recipe/new/route.ts
enum UNIT {
  GRAMS
  INDIVIDUAL
  MILLILITRES
  TABLESPOON
  TEASPOON
  OUNCE
  CUP
  CLOVES
}

enum GENERATION_REQUEST_TYPE {
  GENERATIVE
  ITERATIVE
}

enum GENERATION_REQUEST_STATUS {
  GENERATION_REQUESTED
  GENERATION_PROGRESS
  GENERATION_COMPLETE
  GENERATION_FAILED
}

enum IMAGE_GENERATION_REQUEST_STATUS {
  GENERATION_REQUESTED
  GENERATION_PROGRESS
  GENERATION_UPLOADED
  GENERATION_COMPLETE
  GENERATION_FAILED
}

//
// AUTH
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String                   @id @default(cuid())
  name           String?
  email          String?                  @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  recipes        Recipe[]
  prompts        GenerationRequest[]
  images         ImageGenerationRequest[]
  transactions   CoinTransaction[]
  coins          CoinBalance?
  stripeCustomer StripeCustomer?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// TOKENS & PAYMENT
//

model CoinTransaction {
  id              String              @id @default(cuid())
  amount          Int
  transactionType CoinTransactionType
  createdAt       DateTime            @default(now())
  transactionId   String? // Optional, based on your payment system

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model CoinBalance {
  userId   String   @unique
  balance  Int
  updateAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model StripeProduct {
  stripeProductId String  @unique
  name            String
  coins           Int
  priceId         String
  productLive     Boolean @default(false)

  price StripePrice @relation(fields: [priceId], references: [stripePriceId])
}

model StripePrice {
  stripePriceId String  @unique
  priceGBP      Decimal @db.Decimal(5, 2)

  Product StripeProduct[]
}

model StripeCustomer {
  stripeCustomerId String @unique
  stripeName       String
  stripeEmail      String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum CoinTransactionType {
  SIGNUP
  PURCHASED
  REFUNDED
  USED
}
